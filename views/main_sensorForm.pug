extends layout

block content

    //
        Page for viewing and managing compost sensors.
    //

    h1.ui.center.aligned.header= title
    p This is where you can view the current sensor data as well as add and edit the characteristics of sensors.

    //
        If there are sensors in the database, list them here. Also includes a
        column for the actions that can be used on that sensor.
        If there are no sensors, shows a message.
    //
    if sensors
        h3 Sensor list:
        table.ui.celled.small.table
            thead
                tr
                    th Name
                    th Description
                    th Thingsboard ID
                    th Actions
            tbody
                each row in sensors
                    tr
                            td #{row.name}
                            td #{row.description}
                            td #{row.id}
                            td

                                //
                                    At present, the current actions are to edit the
                                    sensor or delete it. Editing a sensor copies
                                    its data to the form below the lists and
                                    changes the text of the page to indicate this.
                                    Deleting a sensor uses a dedicated form so it
                                    can be sent to the right route.
                                //
                                table
                                    tr
                                        td
                                            button.mini.ui.button(value=row.id onclick='sensorEditButton(this)') Edit
                                        td
                                            form(action='/deleteSensor' method='POST' onsubmit="return sensorDeleteButton()")
                                                input(name='id' id='deleteId' type='hidden' value=row.id)
                                                input.mini.negative.ui.button(value='Delete', type='submit')

        //
            Shows the latest data that has been saved in the database for each
            sensor. If there is no data, shows N/A for that sensor.
            As the methane sensor used in the Substation33 device gives a
            voltage rather than an actual PPM reading, it needs to be converted
            here.
        //
        h3 Latest data for each sensor
        table.ui.celled.small.table
            thead
                tr
                    th Sensor
                    th Latest timestamp
                    th Methane levels
                    th Range last half hour
                    th Sensor temperature
                    th External temperature
                    th Humidity
            tbody
                each row in sensors
                        tr
                            td #{row.name}
                            if row.timestamp
                                td #{row.timestamp}
                                td #{(row.mv > 2) ? ((row.mv-2)/5)*10000 : 0} ppm
                                td #{(row.mvmin > 2) ? ((row.mvmin-2)/5)*10000 : 0} ppm - #{(row.mvmax > 2) ? ((row.mvmax-2)/5)*10000 : 0} ppm
                                td #{row.st}°C
                                td #{row.et}°C
                                td #{row.h}%
                            else
                                td N/A
                                td N/A
                                td N/A
                                td N/A
                                td N/A
                                td N/A

        //
            Lists whether each sensor in the database is currently connected
            to the Thingsboard websocket.
            This does not update automatically - refreshing the page will get
            the latest status.
        //
        h3 Current connection status of each sensor
        ul
            each row in sensors
                if row.connected == true
                    li #{row.name}: <Text style="color:green">Connected</Text>
                else
                    li #{row.name}: <Text style="color:red">Not connected</Text>
        form(action='/resetSensorConnections', method='POST')
            input.ui.secondary.button(value='Reset sensor connections', type='submit')
            i.large.question.circle.icon(data-position="right center")
            .ui.popup Disconnects any existing sensor connections to ThingsBoard and then attempts to reconnect all sensors. This is primarily intended to reconnect a sensor that has disconnected by itself for some reason.

    else
        p There are currently no sensors in the database.

    //
        Form for adding a sensor, or editing an existing one.
        This goes to the same route on the server on submission. Whether it is
        an add or edit action is determined if the hidden original ID field has
        a value. This also allows the ID to be changed if it was entered
        incorrectly.
    //
    h3(id='formTitle') Add a sensor
    form.ui.form(action='/setSensor', method='POST')
        p(id='formSubtitle', style="display: none") -
        .field
            label Thingsboard ID <i class="question circle icon"></i><div class="ui popup">The ID given to the sensor on ThingsBoard. You will either need to log in to ThingsBoard yourself to get the ID, or contact those that built the sensor for you.</div>
            input(name='formId' id='formId')
            input(name='formOriginalId' id='formOriginalId' type='hidden')
        .field
            label Name <i class="question circle icon"></i><div class="ui popup">The name of the sensor. Typically this will also be supplied by ThingsBoard, but it does not need to be.</div>
            input(name='formName' id='formName')
        .field
            label Description (optional) <i class="question circle icon"></i><div class="ui popup">A longer description for the sensor, to better describe what it is for, where it is, etc. This is optional and can be left blank.</div>
            input(name='formDescription' id='formDescription')

            //
                Buttons for clearing and submittting the form.
            //
        button.ui.secondary.button(onclick='clearAddUpdateForm()' type='button') Clear
        input.ui.primary.button(id="formSubmit", value='Add sensor', type='submit')

    p
        // a.ui.button(href="/") Return to home
    script.
        // Script for the sensor page.

        // Get the array of sensors that was sent as a variable when rendering
        // the page.
        var sensors = !{JSON.stringify(sensors)};

        // Get the form's text as well as the inputs.
        var $formTitle = document.getElementById('formTitle');
        var $formSubtitle = document.getElementById('formSubtitle');
        var $formOriginalId = document.getElementById('formOriginalId');
        var $formId = document.getElementById('formId');
        var $formName = document.getElementById('formName');
        var $formDescription = document.getElementById('formDescription');
        var $formSubmit = document.getElementById('formSubmit');

        // Sets up the form for editing the sensor specified by the ID
        // parameter.
        function switchToUpdateForm(id) {
            $formId.value = id;
            $formOriginalId.value = id;
            for (var row of sensors) {
                if (row.id === id) {
                    $formName.value = row.name;
                    $formDescription.value = row.description;
                    break;
                }
            }

            // Change the title and show the subtitle.
            $formTitle.textContent = "Edit a sensor";
            $formSubtitle.style = "display: inherit";
            $formSubtitle.textContent = `Editing sensor ${id}`;
            $formSubmit.value = "Save changes";
        }

        // When the user clicks on the clear form button, clear all form
        // fields. This also sets the form back to add mode if it wasn't
        // already.
        function clearAddUpdateForm() {
            $formId.value = "";
            $formOriginalId.value = "";
            $formName.value = "";
            $formDescription.value = "";

            // Change the title and hide the subtitle.
            $formTitle.textContent = "Add a sensor";
            $formSubtitle.style = "display: none";
            $formSubtitle.textContent = "-";
            $formSubmit.value = "Add sensor";
        }

        // When the user clicks on the button to edit a sensor, set up the form
        // for editing.
        function sensorEditButton(button) {
            switchToUpdateForm(button.value);
        }

        // When the user clicks on the button to delete a sensor, give them a
        // prompt to make sure they wanted to do it.
        function sensorDeleteButton() {
            var answer = confirm('Are you sure you want to delete this sensor? This will also delete all sensor data for that sensor.');
            if (answer === true) {
                return true;
            } else {
                return false;
            }
        }

        // Make sure the form is populated correctly if there's already a value
        // for the original ID.
        window.onload = function() {
            if ($formOriginalId.value !== "" && $formOriginalId.value !== undefined) {
                switchToUpdateForm($formOriginalId.value);
            } else {
                clearAddUpdateForm();
            }
        }

        // If there was an error message from the user's submission, show an
        // alert.
        var submitErrorMessage = "#{submitErrorMessage}";
        if (submitErrorMessage) {
            alert(submitErrorMessage);
        }

        // If there was a success message from the user's submission, show an
        // alert.
        var submitSuccessMessage = "#{submitSuccessMessage}";
        if (submitSuccessMessage) {
            alert(submitSuccessMessage);
        }

        // If there was an error message from the user's attempt to reset
        // sensors, show an alert.
        var resetErrorMessage = "#{resetErrorMessage}";
        if (resetErrorMessage) {
            alert(resetErrorMessage);
        }

        // If there was a success message from the user's attempt to reset
        // sensors, show an alert.
        var resetSuccessMessage = "#{resetSuccessMessage}";
        if (resetSuccessMessage) {
            alert(resetSuccessMessage);
        }